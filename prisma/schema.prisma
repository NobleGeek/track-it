// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int           @id @default(autoincrement()) @map("user_id")
  name          String?       @db.VarChar(50)
  username      String        @unique @db.VarChar(50)
  password      String        @db.VarChar(255)
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  budgets       Budget[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Budget {
  id          Int           @id @default(autoincrement()) @map("budget_id")
  name        String        @db.VarChar(100)
  description String?       @db.Text
  totalLimit  Decimal       @map("total_limit") @db.Decimal(12,2)
  createdAt   DateTime      @default(now()) @map("created_at")
  userId      Int          @map("user_id")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("budgets")
}

model Transaction {
  id              Int       @id @default(autoincrement()) @map("transaction_id")
  amount          Decimal   @db.Decimal(12,2)
  transactionDate DateTime  @map("transaction_date") @db.Timestamp()
  isExpense       Boolean   @map("is_expense")
  category        String?   @db.VarChar(50)
  description     String?   @db.Text
  
  userId          Int      @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgetId        Int?     @map("budget_id")
  budget          Budget?  @relation(fields: [budgetId], references: [id])

  @@index([userId])
  @@index([budgetId])
  @@map("transactions")
}
